# Generated from Simple.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from SimpleParser import SimpleParser


def serializedATN():
    return [
        4,0,51,426,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,
        180,8,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
        1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,
        1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,321,
        8,39,1,40,1,40,3,40,325,8,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,
        1,42,5,42,335,8,42,10,42,12,42,338,9,42,1,43,1,43,5,43,342,8,43,
        10,43,12,43,345,9,43,1,43,1,43,1,44,1,44,3,44,351,8,44,1,45,1,45,
        5,45,355,8,45,10,45,12,45,358,9,45,1,45,4,45,361,8,45,11,45,12,45,
        362,3,45,365,8,45,1,46,3,46,368,8,46,1,46,1,46,1,46,1,47,1,47,3,
        47,375,8,47,1,47,1,47,1,47,3,47,380,8,47,5,47,382,8,47,10,47,12,
        47,385,9,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,3,51,395,8,51,
        1,52,1,52,3,52,399,8,52,1,53,3,53,402,8,53,1,53,1,53,5,53,406,8,
        53,10,53,12,53,409,9,53,1,54,4,54,412,8,54,11,54,12,54,413,1,54,
        1,54,1,55,1,55,5,55,420,8,55,10,55,12,55,423,9,55,1,55,1,55,0,0,
        56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,0,99,0,101,0,103,0,105,0,107,49,109,50,111,51,
        1,0,5,2,0,65,90,97,122,1,0,48,57,1,0,49,57,2,0,9,9,32,32,2,0,10,
        10,13,13,444,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,107,1,0,0,0,0,109,
        1,0,0,0,0,111,1,0,0,0,1,113,1,0,0,0,3,115,1,0,0,0,5,117,1,0,0,0,
        7,119,1,0,0,0,9,129,1,0,0,0,11,132,1,0,0,0,13,135,1,0,0,0,15,141,
        1,0,0,0,17,149,1,0,0,0,19,155,1,0,0,0,21,164,1,0,0,0,23,179,1,0,
        0,0,25,181,1,0,0,0,27,184,1,0,0,0,29,189,1,0,0,0,31,194,1,0,0,0,
        33,198,1,0,0,0,35,208,1,0,0,0,37,214,1,0,0,0,39,223,1,0,0,0,41,228,
        1,0,0,0,43,232,1,0,0,0,45,234,1,0,0,0,47,236,1,0,0,0,49,238,1,0,
        0,0,51,240,1,0,0,0,53,242,1,0,0,0,55,244,1,0,0,0,57,246,1,0,0,0,
        59,248,1,0,0,0,61,251,1,0,0,0,63,254,1,0,0,0,65,256,1,0,0,0,67,258,
        1,0,0,0,69,261,1,0,0,0,71,263,1,0,0,0,73,265,1,0,0,0,75,267,1,0,
        0,0,77,270,1,0,0,0,79,320,1,0,0,0,81,322,1,0,0,0,83,328,1,0,0,0,
        85,332,1,0,0,0,87,339,1,0,0,0,89,350,1,0,0,0,91,364,1,0,0,0,93,367,
        1,0,0,0,95,374,1,0,0,0,97,386,1,0,0,0,99,388,1,0,0,0,101,390,1,0,
        0,0,103,394,1,0,0,0,105,398,1,0,0,0,107,401,1,0,0,0,109,411,1,0,
        0,0,111,417,1,0,0,0,113,114,5,61,0,0,114,2,1,0,0,0,115,116,5,44,
        0,0,116,4,1,0,0,0,117,118,5,58,0,0,118,6,1,0,0,0,119,120,5,114,0,
        0,120,121,5,111,0,0,121,122,5,117,0,0,122,123,5,110,0,0,123,124,
        5,100,0,0,124,125,5,115,0,0,125,126,5,32,0,0,126,127,5,100,0,0,127,
        128,5,111,0,0,128,8,1,0,0,0,129,130,5,62,0,0,130,131,5,61,0,0,131,
        10,1,0,0,0,132,133,5,60,0,0,133,134,5,61,0,0,134,12,1,0,0,0,135,
        136,5,112,0,0,136,137,5,97,0,0,137,138,5,116,0,0,138,139,5,99,0,
        0,139,140,5,104,0,0,140,14,1,0,0,0,141,142,5,105,0,0,142,143,5,110,
        0,0,143,144,5,99,0,0,144,145,5,108,0,0,145,146,5,117,0,0,146,147,
        5,100,0,0,147,148,5,101,0,0,148,16,1,0,0,0,149,150,5,98,0,0,150,
        151,5,108,0,0,151,152,5,111,0,0,152,153,5,99,0,0,153,154,5,107,0,
        0,154,18,1,0,0,0,155,156,5,115,0,0,156,157,5,117,0,0,157,158,5,98,
        0,0,158,159,5,98,0,0,159,160,5,108,0,0,160,161,5,111,0,0,161,162,
        5,99,0,0,162,163,5,107,0,0,163,20,1,0,0,0,164,165,5,58,0,0,165,166,
        5,58,0,0,166,22,1,0,0,0,167,168,5,100,0,0,168,169,5,105,0,0,169,
        170,5,115,0,0,170,171,5,99,0,0,171,172,5,111,0,0,172,173,5,110,0,
        0,173,174,5,110,0,0,174,175,5,101,0,0,175,176,5,99,0,0,176,180,5,
        116,0,0,177,178,5,58,0,0,178,180,5,120,0,0,179,167,1,0,0,0,179,177,
        1,0,0,0,180,24,1,0,0,0,181,182,5,105,0,0,182,183,5,102,0,0,183,26,
        1,0,0,0,184,185,5,101,0,0,185,186,5,108,0,0,186,187,5,105,0,0,187,
        188,5,102,0,0,188,28,1,0,0,0,189,190,5,101,0,0,190,191,5,108,0,0,
        191,192,5,115,0,0,192,193,5,101,0,0,193,30,1,0,0,0,194,195,5,102,
        0,0,195,196,5,111,0,0,196,197,5,114,0,0,197,32,1,0,0,0,198,199,5,
        116,0,0,199,200,5,104,0,0,200,201,5,105,0,0,201,202,5,115,0,0,202,
        203,5,114,0,0,203,204,5,111,0,0,204,205,5,117,0,0,205,206,5,110,
        0,0,206,207,5,100,0,0,207,34,1,0,0,0,208,209,5,98,0,0,209,210,5,
        114,0,0,210,211,5,101,0,0,211,212,5,97,0,0,212,213,5,107,0,0,213,
        36,1,0,0,0,214,215,5,99,0,0,215,216,5,111,0,0,216,217,5,110,0,0,
        217,218,5,116,0,0,218,219,5,105,0,0,219,220,5,110,0,0,220,221,5,
        117,0,0,221,222,5,101,0,0,222,38,1,0,0,0,223,224,5,112,0,0,224,225,
        5,97,0,0,225,226,5,115,0,0,226,227,5,115,0,0,227,40,1,0,0,0,228,
        229,5,101,0,0,229,230,5,110,0,0,230,231,5,100,0,0,231,42,1,0,0,0,
        232,233,5,40,0,0,233,44,1,0,0,0,234,235,5,41,0,0,235,46,1,0,0,0,
        236,237,5,123,0,0,237,48,1,0,0,0,238,239,5,125,0,0,239,50,1,0,0,
        0,240,241,5,91,0,0,241,52,1,0,0,0,242,243,5,93,0,0,243,54,1,0,0,
        0,244,245,5,60,0,0,245,56,1,0,0,0,246,247,5,62,0,0,247,58,1,0,0,
        0,248,249,5,61,0,0,249,250,5,61,0,0,250,60,1,0,0,0,251,252,5,33,
        0,0,252,253,5,61,0,0,253,62,1,0,0,0,254,255,5,43,0,0,255,64,1,0,
        0,0,256,257,5,45,0,0,257,66,1,0,0,0,258,259,5,42,0,0,259,260,5,42,
        0,0,260,68,1,0,0,0,261,262,5,42,0,0,262,70,1,0,0,0,263,264,5,47,
        0,0,264,72,1,0,0,0,265,266,5,37,0,0,266,74,1,0,0,0,267,268,5,124,
        0,0,268,269,5,124,0,0,269,76,1,0,0,0,270,271,5,38,0,0,271,272,5,
        38,0,0,272,78,1,0,0,0,273,274,5,97,0,0,274,275,5,114,0,0,275,276,
        5,114,0,0,276,277,5,97,0,0,277,321,5,121,0,0,278,279,5,99,0,0,279,
        280,5,111,0,0,280,281,5,111,0,0,281,282,5,114,0,0,282,283,5,100,
        0,0,283,321,5,115,0,0,284,285,5,102,0,0,285,286,5,108,0,0,286,287,
        5,111,0,0,287,288,5,97,0,0,288,289,5,116,0,0,289,290,5,97,0,0,290,
        291,5,116,0,0,291,292,5,111,0,0,292,321,5,109,0,0,293,294,5,115,
        0,0,294,295,5,121,0,0,295,296,5,109,0,0,296,297,5,98,0,0,297,298,
        5,111,0,0,298,299,5,108,0,0,299,300,5,97,0,0,300,301,5,116,0,0,301,
        302,5,111,0,0,302,321,5,109,0,0,303,304,5,116,0,0,304,305,5,101,
        0,0,305,306,5,120,0,0,306,321,5,116,0,0,307,308,5,109,0,0,308,309,
        5,101,0,0,309,310,5,115,0,0,310,311,5,115,0,0,311,312,5,97,0,0,312,
        313,5,103,0,0,313,321,5,101,0,0,314,315,5,111,0,0,315,316,5,98,0,
        0,316,317,5,106,0,0,317,318,5,101,0,0,318,319,5,99,0,0,319,321,5,
        116,0,0,320,273,1,0,0,0,320,278,1,0,0,0,320,284,1,0,0,0,320,293,
        1,0,0,0,320,303,1,0,0,0,320,307,1,0,0,0,320,314,1,0,0,0,321,80,1,
        0,0,0,322,324,3,43,21,0,323,325,3,95,47,0,324,323,1,0,0,0,324,325,
        1,0,0,0,325,326,1,0,0,0,326,327,3,45,22,0,327,82,1,0,0,0,328,329,
        3,85,42,0,329,330,5,46,0,0,330,331,3,85,42,0,331,84,1,0,0,0,332,
        336,3,103,51,0,333,335,3,105,52,0,334,333,1,0,0,0,335,338,1,0,0,
        0,336,334,1,0,0,0,336,337,1,0,0,0,337,86,1,0,0,0,338,336,1,0,0,0,
        339,343,5,39,0,0,340,342,3,97,48,0,341,340,1,0,0,0,342,345,1,0,0,
        0,343,341,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,343,1,0,0,
        0,346,347,5,39,0,0,347,88,1,0,0,0,348,351,3,91,45,0,349,351,3,93,
        46,0,350,348,1,0,0,0,350,349,1,0,0,0,351,90,1,0,0,0,352,356,3,101,
        50,0,353,355,3,99,49,0,354,353,1,0,0,0,355,358,1,0,0,0,356,354,1,
        0,0,0,356,357,1,0,0,0,357,365,1,0,0,0,358,356,1,0,0,0,359,361,5,
        48,0,0,360,359,1,0,0,0,361,362,1,0,0,0,362,360,1,0,0,0,362,363,1,
        0,0,0,363,365,1,0,0,0,364,352,1,0,0,0,364,360,1,0,0,0,365,92,1,0,
        0,0,366,368,3,91,45,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,
        0,0,0,369,370,5,46,0,0,370,371,3,91,45,0,371,94,1,0,0,0,372,375,
        3,87,43,0,373,375,3,89,44,0,374,372,1,0,0,0,374,373,1,0,0,0,375,
        383,1,0,0,0,376,379,5,44,0,0,377,380,3,87,43,0,378,380,3,89,44,0,
        379,377,1,0,0,0,379,378,1,0,0,0,380,382,1,0,0,0,381,376,1,0,0,0,
        382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,96,1,0,0,0,385,
        383,1,0,0,0,386,387,7,0,0,0,387,98,1,0,0,0,388,389,7,1,0,0,389,100,
        1,0,0,0,390,391,7,2,0,0,391,102,1,0,0,0,392,395,5,95,0,0,393,395,
        3,97,48,0,394,392,1,0,0,0,394,393,1,0,0,0,395,104,1,0,0,0,396,399,
        3,97,48,0,397,399,3,99,49,0,398,396,1,0,0,0,398,397,1,0,0,0,399,
        106,1,0,0,0,400,402,5,13,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,
        403,1,0,0,0,403,407,5,10,0,0,404,406,5,32,0,0,405,404,1,0,0,0,406,
        409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,108,1,0,0,0,409,
        407,1,0,0,0,410,412,7,3,0,0,411,410,1,0,0,0,412,413,1,0,0,0,413,
        411,1,0,0,0,413,414,1,0,0,0,414,415,1,0,0,0,415,416,6,54,0,0,416,
        110,1,0,0,0,417,421,5,35,0,0,418,420,8,4,0,0,419,418,1,0,0,0,420,
        423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,
        421,1,0,0,0,424,425,6,55,0,0,425,112,1,0,0,0,20,0,179,320,324,336,
        343,350,356,362,364,367,374,379,383,394,398,401,407,413,421,1,6,
        0,0
    ]

class SimpleLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    PATCH = 7
    INCLUDE = 8
    BLOCK = 9
    SUBBLOCK = 10
    CONNECT = 11
    DISCONNECT = 12
    IF = 13
    ELIF = 14
    ELSE = 15
    FOR = 16
    THISROUND = 17
    BREAK = 18
    CONTINUE = 19
    PASS = 20
    END = 21
    L_PAREN = 22
    R_PAREN = 23
    L_CURLY = 24
    R_CURLY = 25
    L_BRACKET = 26
    R_BRACKET = 27
    L_ANGLE = 28
    R_ANGLE = 29
    EQ = 30
    NOT_EQ = 31
    PLUS = 32
    MINUS = 33
    POW = 34
    STAR = 35
    DIV = 36
    MOD = 37
    OR = 38
    AND = 39
    NODETYPE = 40
    PARAMETERS = 41
    SINGLE_PARAM = 42
    ID = 43
    STRING = 44
    NUMBER = 45
    INTEGER = 46
    FLOAT = 47
    LIST = 48
    NL = 49
    WS = 50
    COMMENT = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "','", "':'", "'rounds do'", "'>='", "'<='", "'patch'", 
            "'include'", "'block'", "'subblock'", "'::'", "'if'", "'elif'", 
            "'else'", "'for'", "'thisround'", "'break'", "'continue'", "'pass'", 
            "'end'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'<'", "'>'", 
            "'=='", "'!='", "'+'", "'-'", "'**'", "'*'", "'/'", "'%'", "'||'", 
            "'&&'" ]

    symbolicNames = [ "<INVALID>",
            "PATCH", "INCLUDE", "BLOCK", "SUBBLOCK", "CONNECT", "DISCONNECT", 
            "IF", "ELIF", "ELSE", "FOR", "THISROUND", "BREAK", "CONTINUE", 
            "PASS", "END", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", "L_BRACKET", 
            "R_BRACKET", "L_ANGLE", "R_ANGLE", "EQ", "NOT_EQ", "PLUS", "MINUS", 
            "POW", "STAR", "DIV", "MOD", "OR", "AND", "NODETYPE", "PARAMETERS", 
            "SINGLE_PARAM", "ID", "STRING", "NUMBER", "INTEGER", "FLOAT", 
            "LIST", "NL", "WS", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "PATCH", 
                  "INCLUDE", "BLOCK", "SUBBLOCK", "CONNECT", "DISCONNECT", 
                  "IF", "ELIF", "ELSE", "FOR", "THISROUND", "BREAK", "CONTINUE", 
                  "PASS", "END", "L_PAREN", "R_PAREN", "L_CURLY", "R_CURLY", 
                  "L_BRACKET", "R_BRACKET", "L_ANGLE", "R_ANGLE", "EQ", 
                  "NOT_EQ", "PLUS", "MINUS", "POW", "STAR", "DIV", "MOD", 
                  "OR", "AND", "NODETYPE", "PARAMETERS", "SINGLE_PARAM", 
                  "ID", "STRING", "NUMBER", "INTEGER", "FLOAT", "LIST", 
                  "LETTER", "DIGIT", "NON_ZERO_DIGIT", "ID_START", "ID_CONTINUE", 
                  "NL", "WS", "COMMENT" ]

    grammarFileName = "Simple.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    class SimpleDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: SimpleLexer = lexer

        def pull_token(self):
            return super(SimpleLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.SimpleDenter(self, self.NL, SimpleParser.INDENT, SimpleParser.DEDENT, True)
        return self.denter.next_token()



